/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace Bids {
  export type ElementStruct = {
    bidder: PromiseOrValue<string>;
    salt: PromiseOrValue<BytesLike>;
    amount: PromiseOrValue<BigNumberish>;
    blockNumber: PromiseOrValue<BigNumberish>;
    prevKey: PromiseOrValue<BigNumberish>;
    nextKey: PromiseOrValue<BigNumberish>;
  };

  export type ElementStructOutput = [
    string,
    string,
    BigNumber,
    BigNumber,
    number,
    number
  ] & {
    bidder: string;
    salt: string;
    amount: BigNumber;
    blockNumber: BigNumber;
    prevKey: number;
    nextKey: number;
  };
}

export declare namespace ThemisAuction {
  export type CollateralizationProofStruct = {
    accountMerkleProof: PromiseOrValue<BytesLike>[];
    blockHeaderRLP: PromiseOrValue<BytesLike>;
  };

  export type CollateralizationProofStructOutput = [string[], string] & {
    accountMerkleProof: string[];
    blockHeaderRLP: string;
  };
}

export interface ThemisAuctionInterface extends utils.Interface {
  functions: {
    "BASE_ASSET_URI()": FunctionFragment;
    "MAX_SUPPLY()": FunctionFragment;
    "amountOwed(address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "bidAmounts(address)": FunctionFragment;
    "collateralToken()": FunctionFragment;
    "collectionOwner()": FunctionFragment;
    "endAuction()": FunctionFragment;
    "endBidPeriod()": FunctionFragment;
    "endOfBiddingPeriod()": FunctionFragment;
    "endOfRevealPeriod()": FunctionFragment;
    "endRevealPeriod()": FunctionFragment;
    "getApproved(uint256)": FunctionFragment;
    "getHighestBids()": FunctionFragment;
    "getVaultAddress(address,address,address,bytes32)": FunctionFragment;
    "highestBids()": FunctionFragment;
    "initialize(uint64,uint64,uint128)": FunctionFragment;
    "isApprovedForAll(address,address)": FunctionFragment;
    "mint(uint256)": FunctionFragment;
    "name()": FunctionFragment;
    "ownerOf(uint256)": FunctionFragment;
    "reservePrice()": FunctionFragment;
    "revealBid(address,bytes32,uint32,uint32,(bytes[],bytes))": FunctionFragment;
    "revealedVaults(address)": FunctionFragment;
    "safeTransferFrom(address,address,uint256)": FunctionFragment;
    "safeTransferFrom(address,address,uint256,bytes)": FunctionFragment;
    "setApprovalForAll(address,bool)": FunctionFragment;
    "setCollateralToken(address)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "symbol()": FunctionFragment;
    "tokenURI(uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "unlockVault(address,bytes32)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "BASE_ASSET_URI"
      | "MAX_SUPPLY"
      | "amountOwed"
      | "approve"
      | "balanceOf"
      | "bidAmounts"
      | "collateralToken"
      | "collectionOwner"
      | "endAuction"
      | "endBidPeriod"
      | "endOfBiddingPeriod"
      | "endOfRevealPeriod"
      | "endRevealPeriod"
      | "getApproved"
      | "getHighestBids"
      | "getVaultAddress"
      | "highestBids"
      | "initialize"
      | "isApprovedForAll"
      | "mint"
      | "name"
      | "ownerOf"
      | "reservePrice"
      | "revealBid"
      | "revealedVaults"
      | "safeTransferFrom(address,address,uint256)"
      | "safeTransferFrom(address,address,uint256,bytes)"
      | "setApprovalForAll"
      | "setCollateralToken"
      | "supportsInterface"
      | "symbol"
      | "tokenURI"
      | "transferFrom"
      | "unlockVault"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "BASE_ASSET_URI",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_SUPPLY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "amountOwed",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "bidAmounts",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "collateralToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "collectionOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "endAuction",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "endBidPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "endOfBiddingPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "endOfRevealPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "endRevealPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getHighestBids",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getVaultAddress",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "highestBids",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "reservePrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "revealBid",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      ThemisAuction.CollateralizationProofStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "revealedVaults",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setCollateralToken",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "unlockVault",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;

  decodeFunctionResult(
    functionFragment: "BASE_ASSET_URI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "MAX_SUPPLY", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "amountOwed", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bidAmounts", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "collateralToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collectionOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "endAuction", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "endBidPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "endOfBiddingPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "endOfRevealPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "endRevealPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getHighestBids",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVaultAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "highestBids",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "reservePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revealBid", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "revealedVaults",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCollateralToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unlockVault",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "ApprovalForAll(address,address,bool)": EventFragment;
    "AuctionEnded(uint256)": EventFragment;
    "AuctionInitialized(address,address,uint64,uint64,uint64,uint128)": EventFragment;
    "BidDiscarded(address,uint128,uint64)": EventFragment;
    "BidFailed(uint256,address,address,uint128)": EventFragment;
    "BidProvenRemote(uint256,bytes32,address,uint256)": EventFragment;
    "BidRevealed(address,uint128,uint64)": EventFragment;
    "BidShortlisted(uint32,uint32,address,uint128)": EventFragment;
    "BidSuccessfullyPlaced(uint256,address,address,uint128)": EventFragment;
    "ReceivedToken(uint32,bytes32,string,address,uint256)": EventFragment;
    "RevealEnded(uint256)": EventFragment;
    "RevealStarted(uint256)": EventFragment;
    "RevealStartedController(uint256)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "VaultDeployed(bytes32,address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AuctionEnded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AuctionInitialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BidDiscarded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BidFailed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BidProvenRemote"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BidRevealed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BidShortlisted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BidSuccessfullyPlaced"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReceivedToken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RevealEnded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RevealStarted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RevealStartedController"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VaultDeployed"): EventFragment;
}

export interface ApprovalEventObject {
  owner: string;
  spender: string;
  id: BigNumber;
}
export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  ApprovalEventObject
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface ApprovalForAllEventObject {
  owner: string;
  operator: string;
  approved: boolean;
}
export type ApprovalForAllEvent = TypedEvent<
  [string, string, boolean],
  ApprovalForAllEventObject
>;

export type ApprovalForAllEventFilter = TypedEventFilter<ApprovalForAllEvent>;

export interface AuctionEndedEventObject {
  timestamp: BigNumber;
}
export type AuctionEndedEvent = TypedEvent<
  [BigNumber],
  AuctionEndedEventObject
>;

export type AuctionEndedEventFilter = TypedEventFilter<AuctionEndedEvent>;

export interface AuctionInitializedEventObject {
  auction: string;
  owner: string;
  auctionStart: BigNumber;
  BidDeadline: BigNumber;
  RevealDeadline: BigNumber;
  reservePrice: BigNumber;
}
export type AuctionInitializedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber, BigNumber],
  AuctionInitializedEventObject
>;

export type AuctionInitializedEventFilter =
  TypedEventFilter<AuctionInitializedEvent>;

export interface BidDiscardedEventObject {
  bidder: string;
  amount: BigNumber;
  blockNumber: BigNumber;
}
export type BidDiscardedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  BidDiscardedEventObject
>;

export type BidDiscardedEventFilter = TypedEventFilter<BidDiscardedEvent>;

export interface BidFailedEventObject {
  timestamp: BigNumber;
  auction: string;
  bidder: string;
  bidAmount: BigNumber;
}
export type BidFailedEvent = TypedEvent<
  [BigNumber, string, string, BigNumber],
  BidFailedEventObject
>;

export type BidFailedEventFilter = TypedEventFilter<BidFailedEvent>;

export interface BidProvenRemoteEventObject {
  timestamp: BigNumber;
  auction: string;
  bidder_: string;
  vaultAmount_: BigNumber;
}
export type BidProvenRemoteEvent = TypedEvent<
  [BigNumber, string, string, BigNumber],
  BidProvenRemoteEventObject
>;

export type BidProvenRemoteEventFilter = TypedEventFilter<BidProvenRemoteEvent>;

export interface BidRevealedEventObject {
  bidder: string;
  amount: BigNumber;
  blockNumber: BigNumber;
}
export type BidRevealedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  BidRevealedEventObject
>;

export type BidRevealedEventFilter = TypedEventFilter<BidRevealedEvent>;

export interface BidShortlistedEventObject {
  mintIndex: number;
  domain: number;
  bidder: string;
  bidAmount: BigNumber;
}
export type BidShortlistedEvent = TypedEvent<
  [number, number, string, BigNumber],
  BidShortlistedEventObject
>;

export type BidShortlistedEventFilter = TypedEventFilter<BidShortlistedEvent>;

export interface BidSuccessfullyPlacedEventObject {
  timestamp: BigNumber;
  auction: string;
  bidder: string;
  bidAmount: BigNumber;
}
export type BidSuccessfullyPlacedEvent = TypedEvent<
  [BigNumber, string, string, BigNumber],
  BidSuccessfullyPlacedEventObject
>;

export type BidSuccessfullyPlacedEventFilter =
  TypedEventFilter<BidSuccessfullyPlacedEvent>;

export interface ReceivedTokenEventObject {
  origin: number;
  sender: string;
  data: string;
  token: string;
  amount: BigNumber;
}
export type ReceivedTokenEvent = TypedEvent<
  [number, string, string, string, BigNumber],
  ReceivedTokenEventObject
>;

export type ReceivedTokenEventFilter = TypedEventFilter<ReceivedTokenEvent>;

export interface RevealEndedEventObject {
  timestamp: BigNumber;
}
export type RevealEndedEvent = TypedEvent<[BigNumber], RevealEndedEventObject>;

export type RevealEndedEventFilter = TypedEventFilter<RevealEndedEvent>;

export interface RevealStartedEventObject {
  timestamp: BigNumber;
}
export type RevealStartedEvent = TypedEvent<
  [BigNumber],
  RevealStartedEventObject
>;

export type RevealStartedEventFilter = TypedEventFilter<RevealStartedEvent>;

export interface RevealStartedControllerEventObject {
  timestamp: BigNumber;
}
export type RevealStartedControllerEvent = TypedEvent<
  [BigNumber],
  RevealStartedControllerEventObject
>;

export type RevealStartedControllerEventFilter =
  TypedEventFilter<RevealStartedControllerEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  id: BigNumber;
}
export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  TransferEventObject
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface VaultDeployedEventObject {
  auction: string;
  bidder: string;
  vault: string;
}
export type VaultDeployedEvent = TypedEvent<
  [string, string, string],
  VaultDeployedEventObject
>;

export type VaultDeployedEventFilter = TypedEventFilter<VaultDeployedEvent>;

export interface ThemisAuction extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ThemisAuctionInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    BASE_ASSET_URI(overrides?: CallOverrides): Promise<[string]>;

    MAX_SUPPLY(overrides?: CallOverrides): Promise<[BigNumber]>;

    amountOwed(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    approve(
      spender: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    balanceOf(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    bidAmounts(
      vault: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    collateralToken(overrides?: CallOverrides): Promise<[string]>;

    collectionOwner(overrides?: CallOverrides): Promise<[string]>;

    endAuction(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    endBidPeriod(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    endOfBiddingPeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    endOfRevealPeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    endRevealPeriod(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getApproved(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getHighestBids(
      overrides?: CallOverrides
    ): Promise<[Bids.ElementStructOutput[]]>;

    getVaultAddress(
      tokenContract: PromiseOrValue<string>,
      collateralToken_: PromiseOrValue<string>,
      bidder: PromiseOrValue<string>,
      salt: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string] & { vault: string }>;

    highestBids(
      overrides?: CallOverrides
    ): Promise<
      [number, number, number, number] & {
        head: number;
        tail: number;
        totalBids: number;
        capacity: number;
      }
    >;

    initialize(
      bidPeriod_: PromiseOrValue<BigNumberish>,
      revealPeriod_: PromiseOrValue<BigNumberish>,
      reservePrice_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isApprovedForAll(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    mint(
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    ownerOf(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string] & { owner: string }>;

    reservePrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    revealBid(
      bidder: PromiseOrValue<string>,
      salt: PromiseOrValue<BytesLike>,
      justLesserBidIndex: PromiseOrValue<BigNumberish>,
      justGreaterBidIndex: PromiseOrValue<BigNumberish>,
      arg4: ThemisAuction.CollateralizationProofStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revealedVaults(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "safeTransferFrom(address,address,uint256)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setApprovalForAll(
      operator: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setCollateralToken(
      collateralToken_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    tokenURI(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unlockVault(
      bidder: PromiseOrValue<string>,
      salt: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  BASE_ASSET_URI(overrides?: CallOverrides): Promise<string>;

  MAX_SUPPLY(overrides?: CallOverrides): Promise<BigNumber>;

  amountOwed(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    spender: PromiseOrValue<string>,
    id: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  balanceOf(
    owner: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  bidAmounts(
    vault: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  collateralToken(overrides?: CallOverrides): Promise<string>;

  collectionOwner(overrides?: CallOverrides): Promise<string>;

  endAuction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  endBidPeriod(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  endOfBiddingPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  endOfRevealPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  endRevealPeriod(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getApproved(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getHighestBids(
    overrides?: CallOverrides
  ): Promise<Bids.ElementStructOutput[]>;

  getVaultAddress(
    tokenContract: PromiseOrValue<string>,
    collateralToken_: PromiseOrValue<string>,
    bidder: PromiseOrValue<string>,
    salt: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  highestBids(
    overrides?: CallOverrides
  ): Promise<
    [number, number, number, number] & {
      head: number;
      tail: number;
      totalBids: number;
      capacity: number;
    }
  >;

  initialize(
    bidPeriod_: PromiseOrValue<BigNumberish>,
    revealPeriod_: PromiseOrValue<BigNumberish>,
    reservePrice_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isApprovedForAll(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  mint(
    id: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  ownerOf(
    id: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  reservePrice(overrides?: CallOverrides): Promise<BigNumber>;

  revealBid(
    bidder: PromiseOrValue<string>,
    salt: PromiseOrValue<BytesLike>,
    justLesserBidIndex: PromiseOrValue<BigNumberish>,
    justGreaterBidIndex: PromiseOrValue<BigNumberish>,
    arg4: ThemisAuction.CollateralizationProofStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revealedVaults(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "safeTransferFrom(address,address,uint256)"(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    id: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256,bytes)"(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    id: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setApprovalForAll(
    operator: PromiseOrValue<string>,
    approved: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setCollateralToken(
    collateralToken_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  symbol(overrides?: CallOverrides): Promise<string>;

  tokenURI(
    id: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  transferFrom(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    id: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unlockVault(
    bidder: PromiseOrValue<string>,
    salt: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    BASE_ASSET_URI(overrides?: CallOverrides): Promise<string>;

    MAX_SUPPLY(overrides?: CallOverrides): Promise<BigNumber>;

    amountOwed(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    balanceOf(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bidAmounts(
      vault: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    collateralToken(overrides?: CallOverrides): Promise<string>;

    collectionOwner(overrides?: CallOverrides): Promise<string>;

    endAuction(overrides?: CallOverrides): Promise<void>;

    endBidPeriod(overrides?: CallOverrides): Promise<void>;

    endOfBiddingPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    endOfRevealPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    endRevealPeriod(overrides?: CallOverrides): Promise<void>;

    getApproved(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getHighestBids(
      overrides?: CallOverrides
    ): Promise<Bids.ElementStructOutput[]>;

    getVaultAddress(
      tokenContract: PromiseOrValue<string>,
      collateralToken_: PromiseOrValue<string>,
      bidder: PromiseOrValue<string>,
      salt: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    highestBids(
      overrides?: CallOverrides
    ): Promise<
      [number, number, number, number] & {
        head: number;
        tail: number;
        totalBids: number;
        capacity: number;
      }
    >;

    initialize(
      bidPeriod_: PromiseOrValue<BigNumberish>,
      revealPeriod_: PromiseOrValue<BigNumberish>,
      reservePrice_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    isApprovedForAll(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    mint(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    name(overrides?: CallOverrides): Promise<string>;

    ownerOf(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    reservePrice(overrides?: CallOverrides): Promise<BigNumber>;

    revealBid(
      bidder: PromiseOrValue<string>,
      salt: PromiseOrValue<BytesLike>,
      justLesserBidIndex: PromiseOrValue<BigNumberish>,
      justGreaterBidIndex: PromiseOrValue<BigNumberish>,
      arg4: ThemisAuction.CollateralizationProofStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    revealedVaults(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "safeTransferFrom(address,address,uint256)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    setApprovalForAll(
      operator: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setCollateralToken(
      collateralToken_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    symbol(overrides?: CallOverrides): Promise<string>;

    tokenURI(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    unlockVault(
      bidder: PromiseOrValue<string>,
      salt: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      id?: PromiseOrValue<BigNumberish> | null
    ): ApprovalEventFilter;
    Approval(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      id?: PromiseOrValue<BigNumberish> | null
    ): ApprovalEventFilter;

    "ApprovalForAll(address,address,bool)"(
      owner?: PromiseOrValue<string> | null,
      operator?: PromiseOrValue<string> | null,
      approved?: null
    ): ApprovalForAllEventFilter;
    ApprovalForAll(
      owner?: PromiseOrValue<string> | null,
      operator?: PromiseOrValue<string> | null,
      approved?: null
    ): ApprovalForAllEventFilter;

    "AuctionEnded(uint256)"(timestamp?: null): AuctionEndedEventFilter;
    AuctionEnded(timestamp?: null): AuctionEndedEventFilter;

    "AuctionInitialized(address,address,uint64,uint64,uint64,uint128)"(
      auction?: PromiseOrValue<string> | null,
      owner?: PromiseOrValue<string> | null,
      auctionStart?: null,
      BidDeadline?: null,
      RevealDeadline?: null,
      reservePrice?: null
    ): AuctionInitializedEventFilter;
    AuctionInitialized(
      auction?: PromiseOrValue<string> | null,
      owner?: PromiseOrValue<string> | null,
      auctionStart?: null,
      BidDeadline?: null,
      RevealDeadline?: null,
      reservePrice?: null
    ): AuctionInitializedEventFilter;

    "BidDiscarded(address,uint128,uint64)"(
      bidder?: PromiseOrValue<string> | null,
      amount?: PromiseOrValue<BigNumberish> | null,
      blockNumber?: PromiseOrValue<BigNumberish> | null
    ): BidDiscardedEventFilter;
    BidDiscarded(
      bidder?: PromiseOrValue<string> | null,
      amount?: PromiseOrValue<BigNumberish> | null,
      blockNumber?: PromiseOrValue<BigNumberish> | null
    ): BidDiscardedEventFilter;

    "BidFailed(uint256,address,address,uint128)"(
      timestamp?: null,
      auction?: PromiseOrValue<string> | null,
      bidder?: null,
      bidAmount?: null
    ): BidFailedEventFilter;
    BidFailed(
      timestamp?: null,
      auction?: PromiseOrValue<string> | null,
      bidder?: null,
      bidAmount?: null
    ): BidFailedEventFilter;

    "BidProvenRemote(uint256,bytes32,address,uint256)"(
      timestamp?: null,
      auction?: PromiseOrValue<BytesLike> | null,
      bidder_?: PromiseOrValue<string> | null,
      vaultAmount_?: null
    ): BidProvenRemoteEventFilter;
    BidProvenRemote(
      timestamp?: null,
      auction?: PromiseOrValue<BytesLike> | null,
      bidder_?: PromiseOrValue<string> | null,
      vaultAmount_?: null
    ): BidProvenRemoteEventFilter;

    "BidRevealed(address,uint128,uint64)"(
      bidder?: null,
      amount?: null,
      blockNumber?: null
    ): BidRevealedEventFilter;
    BidRevealed(
      bidder?: null,
      amount?: null,
      blockNumber?: null
    ): BidRevealedEventFilter;

    "BidShortlisted(uint32,uint32,address,uint128)"(
      mintIndex?: PromiseOrValue<BigNumberish> | null,
      domain?: PromiseOrValue<BigNumberish> | null,
      bidder?: PromiseOrValue<string> | null,
      bidAmount?: null
    ): BidShortlistedEventFilter;
    BidShortlisted(
      mintIndex?: PromiseOrValue<BigNumberish> | null,
      domain?: PromiseOrValue<BigNumberish> | null,
      bidder?: PromiseOrValue<string> | null,
      bidAmount?: null
    ): BidShortlistedEventFilter;

    "BidSuccessfullyPlaced(uint256,address,address,uint128)"(
      timestamp?: null,
      auction?: PromiseOrValue<string> | null,
      bidder?: null,
      bidAmount?: null
    ): BidSuccessfullyPlacedEventFilter;
    BidSuccessfullyPlaced(
      timestamp?: null,
      auction?: PromiseOrValue<string> | null,
      bidder?: null,
      bidAmount?: null
    ): BidSuccessfullyPlacedEventFilter;

    "ReceivedToken(uint32,bytes32,string,address,uint256)"(
      origin?: null,
      sender?: null,
      data?: null,
      token?: null,
      amount?: null
    ): ReceivedTokenEventFilter;
    ReceivedToken(
      origin?: null,
      sender?: null,
      data?: null,
      token?: null,
      amount?: null
    ): ReceivedTokenEventFilter;

    "RevealEnded(uint256)"(timestamp?: null): RevealEndedEventFilter;
    RevealEnded(timestamp?: null): RevealEndedEventFilter;

    "RevealStarted(uint256)"(timestamp?: null): RevealStartedEventFilter;
    RevealStarted(timestamp?: null): RevealStartedEventFilter;

    "RevealStartedController(uint256)"(
      timestamp?: null
    ): RevealStartedControllerEventFilter;
    RevealStartedController(
      timestamp?: null
    ): RevealStartedControllerEventFilter;

    "Transfer(address,address,uint256)"(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      id?: PromiseOrValue<BigNumberish> | null
    ): TransferEventFilter;
    Transfer(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      id?: PromiseOrValue<BigNumberish> | null
    ): TransferEventFilter;

    "VaultDeployed(bytes32,address,address)"(
      auction?: PromiseOrValue<BytesLike> | null,
      bidder?: PromiseOrValue<string> | null,
      vault?: PromiseOrValue<string> | null
    ): VaultDeployedEventFilter;
    VaultDeployed(
      auction?: PromiseOrValue<BytesLike> | null,
      bidder?: PromiseOrValue<string> | null,
      vault?: PromiseOrValue<string> | null
    ): VaultDeployedEventFilter;
  };

  estimateGas: {
    BASE_ASSET_URI(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_SUPPLY(overrides?: CallOverrides): Promise<BigNumber>;

    amountOwed(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    balanceOf(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bidAmounts(
      vault: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    collateralToken(overrides?: CallOverrides): Promise<BigNumber>;

    collectionOwner(overrides?: CallOverrides): Promise<BigNumber>;

    endAuction(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    endBidPeriod(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    endOfBiddingPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    endOfRevealPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    endRevealPeriod(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getApproved(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getHighestBids(overrides?: CallOverrides): Promise<BigNumber>;

    getVaultAddress(
      tokenContract: PromiseOrValue<string>,
      collateralToken_: PromiseOrValue<string>,
      bidder: PromiseOrValue<string>,
      salt: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    highestBids(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      bidPeriod_: PromiseOrValue<BigNumberish>,
      revealPeriod_: PromiseOrValue<BigNumberish>,
      reservePrice_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isApprovedForAll(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mint(
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    ownerOf(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    reservePrice(overrides?: CallOverrides): Promise<BigNumber>;

    revealBid(
      bidder: PromiseOrValue<string>,
      salt: PromiseOrValue<BytesLike>,
      justLesserBidIndex: PromiseOrValue<BigNumberish>,
      justGreaterBidIndex: PromiseOrValue<BigNumberish>,
      arg4: ThemisAuction.CollateralizationProofStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revealedVaults(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setApprovalForAll(
      operator: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setCollateralToken(
      collateralToken_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    tokenURI(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unlockVault(
      bidder: PromiseOrValue<string>,
      salt: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    BASE_ASSET_URI(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_SUPPLY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    amountOwed(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      spender: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bidAmounts(
      vault: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    collateralToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    collectionOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    endAuction(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    endBidPeriod(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    endOfBiddingPeriod(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    endOfRevealPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    endRevealPeriod(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getApproved(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getHighestBids(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getVaultAddress(
      tokenContract: PromiseOrValue<string>,
      collateralToken_: PromiseOrValue<string>,
      bidder: PromiseOrValue<string>,
      salt: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    highestBids(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      bidPeriod_: PromiseOrValue<BigNumberish>,
      revealPeriod_: PromiseOrValue<BigNumberish>,
      reservePrice_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isApprovedForAll(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mint(
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerOf(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    reservePrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    revealBid(
      bidder: PromiseOrValue<string>,
      salt: PromiseOrValue<BytesLike>,
      justLesserBidIndex: PromiseOrValue<BigNumberish>,
      justGreaterBidIndex: PromiseOrValue<BigNumberish>,
      arg4: ThemisAuction.CollateralizationProofStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revealedVaults(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setApprovalForAll(
      operator: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setCollateralToken(
      collateralToken_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenURI(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unlockVault(
      bidder: PromiseOrValue<string>,
      salt: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
