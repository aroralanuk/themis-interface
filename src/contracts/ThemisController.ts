/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace ThemisController {
  export type CollateralizationProofStruct = {
    accountMerkleProof: PromiseOrValue<BytesLike>[];
    blockHeaderRLP: PromiseOrValue<BytesLike>;
  };

  export type CollateralizationProofStructOutput = [string[], string] & {
    accountMerkleProof: string[];
    blockHeaderRLP: string;
  };
}

export interface ThemisControllerInterface extends utils.Interface {
  functions: {
    "auction()": FunctionFragment;
    "bidAmounts(address)": FunctionFragment;
    "collateralToken()": FunctionFragment;
    "connectAuction(uint32,address)": FunctionFragment;
    "deployVaultOnReveal(address,uint128,bytes32)": FunctionFragment;
    "getVaultAddress(address,bytes32)": FunctionFragment;
    "revealBid(address,bytes32,(bytes[],bytes))": FunctionFragment;
    "revealBidCallback(address,uint128,bytes32,bool)": FunctionFragment;
    "revealStartBlock()": FunctionFragment;
    "setCollateralToken(address)": FunctionFragment;
    "startReveal()": FunctionFragment;
    "storedBlockHash()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "auction"
      | "bidAmounts"
      | "collateralToken"
      | "connectAuction"
      | "deployVaultOnReveal"
      | "getVaultAddress"
      | "revealBid"
      | "revealBidCallback"
      | "revealStartBlock"
      | "setCollateralToken"
      | "startReveal"
      | "storedBlockHash"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "auction", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "bidAmounts",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "collateralToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "connectAuction",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "deployVaultOnReveal",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getVaultAddress",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "revealBid",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      ThemisController.CollateralizationProofStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "revealBidCallback",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "revealStartBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setCollateralToken",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "startReveal",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "storedBlockHash",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "auction", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bidAmounts", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "collateralToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "connectAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployVaultOnReveal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVaultAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revealBid", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "revealBidCallback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revealStartBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCollateralToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "startReveal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "storedBlockHash",
    data: BytesLike
  ): Result;

  events: {
    "AuctionEnded(uint256)": EventFragment;
    "AuctionInitialized(address,address,uint64,uint64,uint64,uint128)": EventFragment;
    "BidFailed(uint256,address,address,uint128)": EventFragment;
    "BidProvenRemote(uint256,bytes32,address,uint256)": EventFragment;
    "BidRevealed(uint32,uint32,address,uint128,uint64)": EventFragment;
    "BidShortlisted(uint32,uint32,address,uint128)": EventFragment;
    "BidSuccessfullyPlaced(uint256,address,address,uint128)": EventFragment;
    "ReceivedToken(uint32,bytes32,string,address,uint256)": EventFragment;
    "Reserved(address,uint256)": EventFragment;
    "RevealEnded(uint256)": EventFragment;
    "RevealStarted(uint256)": EventFragment;
    "RevealStartedController(uint256)": EventFragment;
    "VaultDeployed(bytes32,address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AuctionEnded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AuctionInitialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BidFailed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BidProvenRemote"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BidRevealed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BidShortlisted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BidSuccessfullyPlaced"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReceivedToken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Reserved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RevealEnded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RevealStarted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RevealStartedController"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VaultDeployed"): EventFragment;
}

export interface AuctionEndedEventObject {
  timestamp: BigNumber;
}
export type AuctionEndedEvent = TypedEvent<
  [BigNumber],
  AuctionEndedEventObject
>;

export type AuctionEndedEventFilter = TypedEventFilter<AuctionEndedEvent>;

export interface AuctionInitializedEventObject {
  auction: string;
  owner: string;
  auctionStart: BigNumber;
  BidDeadline: BigNumber;
  RevealDeadline: BigNumber;
  reservePrice: BigNumber;
}
export type AuctionInitializedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber, BigNumber],
  AuctionInitializedEventObject
>;

export type AuctionInitializedEventFilter =
  TypedEventFilter<AuctionInitializedEvent>;

export interface BidFailedEventObject {
  timestamp: BigNumber;
  auction: string;
  bidder: string;
  bidAmount: BigNumber;
}
export type BidFailedEvent = TypedEvent<
  [BigNumber, string, string, BigNumber],
  BidFailedEventObject
>;

export type BidFailedEventFilter = TypedEventFilter<BidFailedEvent>;

export interface BidProvenRemoteEventObject {
  timestamp: BigNumber;
  auction: string;
  bidder_: string;
  vaultAmount_: BigNumber;
}
export type BidProvenRemoteEvent = TypedEvent<
  [BigNumber, string, string, BigNumber],
  BidProvenRemoteEventObject
>;

export type BidProvenRemoteEventFilter = TypedEventFilter<BidProvenRemoteEvent>;

export interface BidRevealedEventObject {
  currentPosition: number;
  domain: number;
  bidderAddress: string;
  amount: BigNumber;
  timestamp: BigNumber;
}
export type BidRevealedEvent = TypedEvent<
  [number, number, string, BigNumber, BigNumber],
  BidRevealedEventObject
>;

export type BidRevealedEventFilter = TypedEventFilter<BidRevealedEvent>;

export interface BidShortlistedEventObject {
  mintIndex: number;
  domain: number;
  bidder: string;
  bidAmount: BigNumber;
}
export type BidShortlistedEvent = TypedEvent<
  [number, number, string, BigNumber],
  BidShortlistedEventObject
>;

export type BidShortlistedEventFilter = TypedEventFilter<BidShortlistedEvent>;

export interface BidSuccessfullyPlacedEventObject {
  timestamp: BigNumber;
  auction: string;
  bidder: string;
  bidAmount: BigNumber;
}
export type BidSuccessfullyPlacedEvent = TypedEvent<
  [BigNumber, string, string, BigNumber],
  BidSuccessfullyPlacedEventObject
>;

export type BidSuccessfullyPlacedEventFilter =
  TypedEventFilter<BidSuccessfullyPlacedEvent>;

export interface ReceivedTokenEventObject {
  origin: number;
  sender: string;
  data: string;
  token: string;
  amount: BigNumber;
}
export type ReceivedTokenEvent = TypedEvent<
  [number, string, string, string, BigNumber],
  ReceivedTokenEventObject
>;

export type ReceivedTokenEventFilter = TypedEventFilter<ReceivedTokenEvent>;

export interface ReservedEventObject {
  to: string;
  id: BigNumber;
}
export type ReservedEvent = TypedEvent<
  [string, BigNumber],
  ReservedEventObject
>;

export type ReservedEventFilter = TypedEventFilter<ReservedEvent>;

export interface RevealEndedEventObject {
  timestamp: BigNumber;
}
export type RevealEndedEvent = TypedEvent<[BigNumber], RevealEndedEventObject>;

export type RevealEndedEventFilter = TypedEventFilter<RevealEndedEvent>;

export interface RevealStartedEventObject {
  timestamp: BigNumber;
}
export type RevealStartedEvent = TypedEvent<
  [BigNumber],
  RevealStartedEventObject
>;

export type RevealStartedEventFilter = TypedEventFilter<RevealStartedEvent>;

export interface RevealStartedControllerEventObject {
  timestamp: BigNumber;
}
export type RevealStartedControllerEvent = TypedEvent<
  [BigNumber],
  RevealStartedControllerEventObject
>;

export type RevealStartedControllerEventFilter =
  TypedEventFilter<RevealStartedControllerEvent>;

export interface VaultDeployedEventObject {
  auction: string;
  bidder: string;
  vault: string;
}
export type VaultDeployedEvent = TypedEvent<
  [string, string, string],
  VaultDeployedEventObject
>;

export type VaultDeployedEventFilter = TypedEventFilter<VaultDeployedEvent>;

export interface ThemisController extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ThemisControllerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    auction(overrides?: CallOverrides): Promise<[string]>;

    bidAmounts(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    collateralToken(overrides?: CallOverrides): Promise<[string]>;

    connectAuction(
      domain_: PromiseOrValue<BigNumberish>,
      contract_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    deployVaultOnReveal(
      bidder_: PromiseOrValue<string>,
      bidAmount_: PromiseOrValue<BigNumberish>,
      salt_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getVaultAddress(
      bidder_: PromiseOrValue<string>,
      salt_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string] & { vault: string }>;

    revealBid(
      bidder_: PromiseOrValue<string>,
      salt_: PromiseOrValue<BytesLike>,
      proof_: ThemisController.CollateralizationProofStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revealBidCallback(
      bidder_: PromiseOrValue<string>,
      bidAmount_: PromiseOrValue<BigNumberish>,
      salt_: PromiseOrValue<BytesLike>,
      success_: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revealStartBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    setCollateralToken(
      token_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    startReveal(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    storedBlockHash(overrides?: CallOverrides): Promise<[string]>;
  };

  auction(overrides?: CallOverrides): Promise<string>;

  bidAmounts(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  collateralToken(overrides?: CallOverrides): Promise<string>;

  connectAuction(
    domain_: PromiseOrValue<BigNumberish>,
    contract_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  deployVaultOnReveal(
    bidder_: PromiseOrValue<string>,
    bidAmount_: PromiseOrValue<BigNumberish>,
    salt_: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getVaultAddress(
    bidder_: PromiseOrValue<string>,
    salt_: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  revealBid(
    bidder_: PromiseOrValue<string>,
    salt_: PromiseOrValue<BytesLike>,
    proof_: ThemisController.CollateralizationProofStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revealBidCallback(
    bidder_: PromiseOrValue<string>,
    bidAmount_: PromiseOrValue<BigNumberish>,
    salt_: PromiseOrValue<BytesLike>,
    success_: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revealStartBlock(overrides?: CallOverrides): Promise<BigNumber>;

  setCollateralToken(
    token_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  startReveal(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  storedBlockHash(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    auction(overrides?: CallOverrides): Promise<string>;

    bidAmounts(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    collateralToken(overrides?: CallOverrides): Promise<string>;

    connectAuction(
      domain_: PromiseOrValue<BigNumberish>,
      contract_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    deployVaultOnReveal(
      bidder_: PromiseOrValue<string>,
      bidAmount_: PromiseOrValue<BigNumberish>,
      salt_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<number>;

    getVaultAddress(
      bidder_: PromiseOrValue<string>,
      salt_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    revealBid(
      bidder_: PromiseOrValue<string>,
      salt_: PromiseOrValue<BytesLike>,
      proof_: ThemisController.CollateralizationProofStruct,
      overrides?: CallOverrides
    ): Promise<string>;

    revealBidCallback(
      bidder_: PromiseOrValue<string>,
      bidAmount_: PromiseOrValue<BigNumberish>,
      salt_: PromiseOrValue<BytesLike>,
      success_: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    revealStartBlock(overrides?: CallOverrides): Promise<BigNumber>;

    setCollateralToken(
      token_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    startReveal(overrides?: CallOverrides): Promise<void>;

    storedBlockHash(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "AuctionEnded(uint256)"(timestamp?: null): AuctionEndedEventFilter;
    AuctionEnded(timestamp?: null): AuctionEndedEventFilter;

    "AuctionInitialized(address,address,uint64,uint64,uint64,uint128)"(
      auction?: PromiseOrValue<string> | null,
      owner?: PromiseOrValue<string> | null,
      auctionStart?: null,
      BidDeadline?: null,
      RevealDeadline?: null,
      reservePrice?: null
    ): AuctionInitializedEventFilter;
    AuctionInitialized(
      auction?: PromiseOrValue<string> | null,
      owner?: PromiseOrValue<string> | null,
      auctionStart?: null,
      BidDeadline?: null,
      RevealDeadline?: null,
      reservePrice?: null
    ): AuctionInitializedEventFilter;

    "BidFailed(uint256,address,address,uint128)"(
      timestamp?: null,
      auction?: PromiseOrValue<string> | null,
      bidder?: null,
      bidAmount?: null
    ): BidFailedEventFilter;
    BidFailed(
      timestamp?: null,
      auction?: PromiseOrValue<string> | null,
      bidder?: null,
      bidAmount?: null
    ): BidFailedEventFilter;

    "BidProvenRemote(uint256,bytes32,address,uint256)"(
      timestamp?: null,
      auction?: PromiseOrValue<BytesLike> | null,
      bidder_?: PromiseOrValue<string> | null,
      vaultAmount_?: null
    ): BidProvenRemoteEventFilter;
    BidProvenRemote(
      timestamp?: null,
      auction?: PromiseOrValue<BytesLike> | null,
      bidder_?: PromiseOrValue<string> | null,
      vaultAmount_?: null
    ): BidProvenRemoteEventFilter;

    "BidRevealed(uint32,uint32,address,uint128,uint64)"(
      currentPosition?: PromiseOrValue<BigNumberish> | null,
      domain?: PromiseOrValue<BigNumberish> | null,
      bidderAddress?: PromiseOrValue<string> | null,
      amount?: null,
      timestamp?: null
    ): BidRevealedEventFilter;
    BidRevealed(
      currentPosition?: PromiseOrValue<BigNumberish> | null,
      domain?: PromiseOrValue<BigNumberish> | null,
      bidderAddress?: PromiseOrValue<string> | null,
      amount?: null,
      timestamp?: null
    ): BidRevealedEventFilter;

    "BidShortlisted(uint32,uint32,address,uint128)"(
      mintIndex?: PromiseOrValue<BigNumberish> | null,
      domain?: PromiseOrValue<BigNumberish> | null,
      bidder?: PromiseOrValue<string> | null,
      bidAmount?: null
    ): BidShortlistedEventFilter;
    BidShortlisted(
      mintIndex?: PromiseOrValue<BigNumberish> | null,
      domain?: PromiseOrValue<BigNumberish> | null,
      bidder?: PromiseOrValue<string> | null,
      bidAmount?: null
    ): BidShortlistedEventFilter;

    "BidSuccessfullyPlaced(uint256,address,address,uint128)"(
      timestamp?: null,
      auction?: PromiseOrValue<string> | null,
      bidder?: null,
      bidAmount?: null
    ): BidSuccessfullyPlacedEventFilter;
    BidSuccessfullyPlaced(
      timestamp?: null,
      auction?: PromiseOrValue<string> | null,
      bidder?: null,
      bidAmount?: null
    ): BidSuccessfullyPlacedEventFilter;

    "ReceivedToken(uint32,bytes32,string,address,uint256)"(
      origin?: null,
      sender?: null,
      data?: null,
      token?: null,
      amount?: null
    ): ReceivedTokenEventFilter;
    ReceivedToken(
      origin?: null,
      sender?: null,
      data?: null,
      token?: null,
      amount?: null
    ): ReceivedTokenEventFilter;

    "Reserved(address,uint256)"(
      to?: PromiseOrValue<string> | null,
      id?: PromiseOrValue<BigNumberish> | null
    ): ReservedEventFilter;
    Reserved(
      to?: PromiseOrValue<string> | null,
      id?: PromiseOrValue<BigNumberish> | null
    ): ReservedEventFilter;

    "RevealEnded(uint256)"(timestamp?: null): RevealEndedEventFilter;
    RevealEnded(timestamp?: null): RevealEndedEventFilter;

    "RevealStarted(uint256)"(timestamp?: null): RevealStartedEventFilter;
    RevealStarted(timestamp?: null): RevealStartedEventFilter;

    "RevealStartedController(uint256)"(
      timestamp?: null
    ): RevealStartedControllerEventFilter;
    RevealStartedController(
      timestamp?: null
    ): RevealStartedControllerEventFilter;

    "VaultDeployed(bytes32,address,address)"(
      auction?: PromiseOrValue<BytesLike> | null,
      bidder?: PromiseOrValue<string> | null,
      vault?: PromiseOrValue<string> | null
    ): VaultDeployedEventFilter;
    VaultDeployed(
      auction?: PromiseOrValue<BytesLike> | null,
      bidder?: PromiseOrValue<string> | null,
      vault?: PromiseOrValue<string> | null
    ): VaultDeployedEventFilter;
  };

  estimateGas: {
    auction(overrides?: CallOverrides): Promise<BigNumber>;

    bidAmounts(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    collateralToken(overrides?: CallOverrides): Promise<BigNumber>;

    connectAuction(
      domain_: PromiseOrValue<BigNumberish>,
      contract_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    deployVaultOnReveal(
      bidder_: PromiseOrValue<string>,
      bidAmount_: PromiseOrValue<BigNumberish>,
      salt_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getVaultAddress(
      bidder_: PromiseOrValue<string>,
      salt_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    revealBid(
      bidder_: PromiseOrValue<string>,
      salt_: PromiseOrValue<BytesLike>,
      proof_: ThemisController.CollateralizationProofStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revealBidCallback(
      bidder_: PromiseOrValue<string>,
      bidAmount_: PromiseOrValue<BigNumberish>,
      salt_: PromiseOrValue<BytesLike>,
      success_: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revealStartBlock(overrides?: CallOverrides): Promise<BigNumber>;

    setCollateralToken(
      token_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    startReveal(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    storedBlockHash(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    auction(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bidAmounts(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    collateralToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    connectAuction(
      domain_: PromiseOrValue<BigNumberish>,
      contract_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    deployVaultOnReveal(
      bidder_: PromiseOrValue<string>,
      bidAmount_: PromiseOrValue<BigNumberish>,
      salt_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getVaultAddress(
      bidder_: PromiseOrValue<string>,
      salt_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    revealBid(
      bidder_: PromiseOrValue<string>,
      salt_: PromiseOrValue<BytesLike>,
      proof_: ThemisController.CollateralizationProofStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revealBidCallback(
      bidder_: PromiseOrValue<string>,
      bidAmount_: PromiseOrValue<BigNumberish>,
      salt_: PromiseOrValue<BytesLike>,
      success_: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revealStartBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setCollateralToken(
      token_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    startReveal(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    storedBlockHash(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
